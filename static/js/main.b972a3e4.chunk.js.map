{"version":3,"sources":["SidebarData.js","Navbar.js","route/Profile.js","route/TreeList.js","route/Test.js","Image/ground1.png","route/Dialog.js","route/MyGarden.js","initial-data.js","Task.jsx","Column.jsx","route/SetTimer.js","route/DoneDialog.js","route/watering.png","route/wind.png","route/trimming.png","route/Home.js","Sign/PasswordStr.js","Sign/SignUpForm.js","Sign/SignUpContainer.js","Sign/SignUp.js","route/Login.js","route/MyProfile.js","App.js","index.js"],"names":["SidebarData","title","path","icon","cName","Navbar","useState","sidebar","setSidebar","showSidebar","Provider","value","color","className","to","onClick","map","item","index","React","Component","TreeList","tree","ground","treeList","count","offset","Array","from","length","v","k","id","content","groundList","reorder","list","startIndex","endIndex","result","splice","removed","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","console","log","droppableId","grid","getItemStyle","isDragging","draggableStyle","userSelect","padding","margin","background","getListStyle","isDraggingOver","width","Dialog","props","state","x","y","dragging","stylesList","_dragStart","bind","_dragging","_dragEnd","e","i","this","setState","screenX","currentTarget","getBoundingClientRect","left","screenY","top","flowerArray","theFlower","localStorage","getItem","split","setItem","idx","style","onMouseDown","onMouseMove","onMouseUp","MyGarden","showDialog","itemFriends","initialData","tasks","isDone","columns","taskIds","columnOrder","Container","styled","div","isDragDisabled","onClickEditHandler","target","dir","answer","prompt","onClickDeleteHandler","alert","Task","task","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","Title","h3","TaskList","Column","showComponent","indexTask","key","handleClick","column","Button","type","droppableProps","placeholder","killCount","SetTimer","inputHandler","name","convertToSeconds","hours","minutes","seconds","startTimer","timer","setInterval","countDown","hoursInput","document","querySelector","minutesInput","secondsInput","budContainer","classList","add","LS_KEY_KILL_PLANT","JSON","parse","c_seconds","toDoIsNotEmpty","InProgressIsNotEmpty","remove","stringify","stopTimer","clearInterval","resetTimer","current","createRef","onChange","Home","onDragStart","startColumn","body","transition","onDragUpdate","update","opacity","Object","keys","backgroundColor","onDragEnd","container","Math","floor","random","randomReward","setTimeout","finishColumn","startTaskIds","newStart","finishTaskIds","newFinish","newState","flowers","LS_KEY_FLOWERS","currentFlowersString","newTaskIds","newColumn","newColumnOrder","src","wateringImg","windImg","trimmingImg","direction","columnId","taskId","PasswordStr","strColor","strWidth","score","height","SignUpForm","history","onSubmit","errors","user","btnTxt","pwMask","onPwChange","message","floatingLabelText","username","errorText","email","password","label","position","transform","pwconfirm","primary","href","axios","require","validateSignUpForm","zxcvbn","SignUpContainer","handleChange","submitSignup","validateForm","pwHandleChange","event","field","assign","pw","params","usr","post","then","res","data","success","token","isAuthenticated","window","location","reload","catch","err","preventDefault","payload","SignUp","Login","pass","Form","Group","InputGroup","Text","Control","inputStyles","fontSize","buttonStyles","variant","ImgUpload","htmlFor","nameText","emailText","all_plantText","Name","Status","valueColumncar","Email","KillCount","AllPlant","Profile","status","Edit","children","MyProfile","file","imagePreviewUrl","active","photoUpload","reader","FileReader","files","onloadend","readAsDataURL","editName","editEmail","editStatus","editKillCount","editAllPlant","handleSubmit","activeP","allPlant","AppPlant","App","exact","component","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.b972a3e4.chunk.js","sourcesContent":["import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SidebarData = [\n  {\n    title: 'Home',\n    path: '/',\n    // icon: <AiIcons.AiFillHome />,\n    icon: \"🏡\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'Profile',\n    path: '/profile',\n    // icon: <IoIcons.IoIosPaper />,\n    icon: \"👩‍🌾\",\n    cName: 'nav-text'\n  },\n  {\n    title: 'My Garden',\n    path: '/mygarden',\n    // icon: <FaIcons.FaCartPlus />,\n    icon: \"🌱\",\n    cName: 'nav-text'\n  }\n];","import React, { useState } from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport { Link } from 'react-router-dom';\nimport { SidebarData } from './SidebarData';\nimport './style/Navbar.css';\nimport { IconContext } from 'react-icons';\n\nfunction Navbar() {\n  const [sidebar, setSidebar] = useState(false);\n\n  const showSidebar = () => setSidebar(!sidebar);\n\n  return (\n    <IconContext.Provider value={{ color: '#fff' }}>\n      <div className='navbar'>\n        <Link to='#' className='menu-bars'>\n          <FaIcons.FaBars onClick={showSidebar} />\n        </Link>\n        <div className='app-title'>\n          <h1>Gardening To-do🌱</h1>\n          {/* QA credit: 다진이가 오타 발견 */}\n        </div>\n        <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\n          <ul className='nav-menu-items' onClick={showSidebar}>\n            <li className='navbar-toggle'>\n              <Link to='#' className='menu-bars'>\n                <AiIcons.AiOutlineClose />\n              </Link>\n            </li>\n            {SidebarData.map((item, index) => {\n              return (\n                <li key={index} className={item.cName}>\n                  <Link to={item.path}>\n                    {item.icon}\n                    <span>{item.title}</span>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n        </div>\n      </IconContext.Provider>\n  );\n}\n\nexport default Navbar;","import React, {Text} from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\"\nimport img_woman from '../Image/woman.png';\n// import \"../style/Profile.css\"\nimport '../style/MyProfile.css';\nclass Profile extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t  nickname: \"sojeong\",\n\t\t  password:\"1234\",\n\t\t  lifeCount:\"10\",\n\t\t  killCount:\"2\"\n\t\t  }  \n\t\t};\n\trender(){\n\treturn (\n\t\t<div className='Profile'>\n\t\t\t{/* <motion.div animate = {{scale:0.5}}/> */}\n\t\t\t<img src = {img_woman}/>\n\t\t\t<p>name : {this.state.nickname}</p>\n\t\t\t<p>PassWord : {this.state.password}</p>\n\t\t\t<p>plant count : {this.state.lifeCount}</p>\n\t\t\t<p>dead plant count : {this.state.killCount}</p>\n\n\t\t</div>\n\n\t);\n\t}\n}\n\n\nexport default Profile;","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\n\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\n// fake data generator\nconst getItems = (count, offset = 0) =>\n    \n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    //id: tree [k+ offset],//-new Date().getTime(),\n    id:  `item-${k + offset}-${new Date().getTime()}`,\n    content: tree [k+ offset] \n    //content: `item ${k + offset}`\n  }));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightgreen\" : \"grey\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"lightblue\" : \"lightgrey\",\n  padding: grid,\n  width: 250\n});\n\nfunction TreeList() {\n  const [state, setState] = useState([getItems(3)])\n  //= useState([getItems(3), getItems(5, 10)]);\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n  }\n\n  return (\n    <div>\n       {/* <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, []]);\n        }}\n      >\n        Add new group\n      </button> \n      <button\n        type=\"button\"\n        onClick={() => {\n          setState([...state, getItems(1)]);\n        }}\n      >\n        Add new item\n      </button>  */}\n      <div style={{ display: \"flex\" }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {state.map((el, ind) => (\n            <Droppable key={ind} droppableId={`${ind}`}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  {el.map((item, index) => (\n                    <Draggable\n                      key={item.id}\n                      draggableId={item.id}\n                      index={index}\n                    >\n                      {(provided, snapshot) => (\n                        <div\n                          ref={provided.innerRef}\n                          {...provided.draggableProps}\n                          {...provided.dragHandleProps}\n                          style={getItemStyle(\n                            snapshot.isDragging,\n                            provided.draggableProps.style\n                          )}\n                        >\n                          <div\n                            style={{\n                              display: \"flex\",\n                              justifyContent: \"space-around\"\n                            }}\n                          >\n                            {item.content}\n                            {/* <button\n                              type=\"button\"\n                              onClick={() => {\n                                const newState = [...state];\n                                newState[ind].splice(index, 1);\n                                setState(\n                                  newState.filter(group => group.length)\n                                );\n                              }}\n                            >\n                              delete\n                            </button> */}\n                          </div>\n                        </div>\n                      )}\n                    </Draggable>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default TreeList;\n","import React, { Component } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport \"../style/Test.css\"\nconst tree = [\"🍋\", \"🍊\", \"🍈\"];\nconst ground = [\"🎅\", \"👩‍🎤\", \"👼\", \"👩‍🦰\",\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// const extension = [\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"]\n// [[\"👨‍🦱\", \"👱‍♀️\", \"👨\", \"🧒\"],\n//  [\"👩‍🦳\", \"👸\", \"🙂\",\"😠\"],\n//  [\"😔\",\"😖\",\"🙁\",\"🤬\"],\n//  [\"🥶\", \"😦\",\"🤢\", \"😈\"]];\n\n// // fake data generator\n// const getItems = (count, offset = 0) =>\n//     Array.from({ length: count }, (v, k) => k).map(k => ({\n//         id: `item-${k + offset}`,\n//         content: `item ${k + offset}`\n//     }));\n// const groundList =(count, offset =0)=> \n// const array\n// (tree.map((items, index) => {\n//     {items.map((subItem, sIndex) =>{\n//         id: `item==${sIndex + offset}`,\n//         content: tree [sIndex + offset] \n//     })}\n// }))\n\n\nconst treeList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `item==${k + offset}`,\n        content: tree [k+ offset] \n    }))\n\nconst groundList = (count, offset = 0) =>\n    Array.from({length: count},(v, k) => k).map(k => ({\n        id: `ite==${k + offset}`,\n        content: ground [k+ offset] \n    }))\n\n// const extensionList = (count, offset = 0) =>\n// Array.from({length: count},(v, k) => k).map(k => ({\n//     id: `ite==${k + offset}`,\n//     content: extension [k+ offset] \n// }))\n\n\n// a little function to help us with reordering the result\n// const reorder = (list, startIndex, endIndex) => {\n//     const result = Array.from(list);\n//     const [removed] = result.splice(startIndex, 1);\n//     result.splice(endIndex, 0, removed);\n\n//     return result;\n// };\n\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\n\nconst move = (source, destination, droppableSource, droppableDestination) => {\n    //source 움직인 쪽의 리스트, destClone 목적지 쪽의 리스트\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    console.log(sourceClone)\n    console.log(destClone)\n\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    //옮겨진 아이템 [removed]\n    console.log([removed])\n    destClone.splice(droppableDestination.index, 0, removed);\n\n    const result = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n};\n\nconst grid = 20;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    padding: grid ,\n    margin: `${grid}px ${grid}px ${grid}px ${grid}px`,\n\n    // change background colour if dragging\n    background: isDragging ? 'grey' : 'grey',\n\n    // styles we need to apply on draggables\n    ...draggableStyle\n});\n\nconst getListStyle = isDraggingOver => ({\n    background: isDraggingOver ? 'lightgrey' : 'lightgrey',\n    padding: grid,\n    width: 250\n});\n\nclass test extends React.Component {\n    state = {\n        items: treeList(3),\n        //selected: extension[4][4]\n        selected: groundList(8),\n        //extension: extensionList(4)\n    };\n\n    id2List = {\n        droppable: 'items',\n        droppable2: 'selected',\n        //droppable3: 'extension'\n\n    };\n\n    getList = id => this.state[this.id2List[id]];\n  \n    onDragEnd = result => {\n        const { source, destination } = result;\n        // dropped outside the list\n        if (!destination) {\n            return;\n        }\n        //자기 자신으로 움직이는 경우 \n        if (source.droppableId === destination.droppableId) {\n            const items = reorder(this.getList(source.droppableId),source.index,destination.index);\n            let state = { items };\n            const newState = [state]\n            newState[source.droppableId] = items;\n            this.setState(newState)\n            \n            //this.setState(state);\n            // //모르겠음\n            // if (source.droppableId === 'droppable2') {\n            //     state = { selected: items };\n            // }\n\n        } else {\n            //움직인 상태 결과 값 \n            const result = move(this.getList(source.droppableId),this.getList(destination.droppableId),source,destination);\n            //this.setState({items: result.droppable, selected: result.droppable2//, extension = result.droppable3\n            const newState = [this.state.selected]\n            newState[source.droppableId] = result[source.droppableId];\n            newState[destination.droppableId] = result[destination.droppableId]\n            this.setState(newState.filter(group => group.length))\n            \n            }\n        }\n    render() {\n        return (\n            <div>\n                <button type = \"button\" onClick ={() => {this.setState([this.state.selected,[]]);}} >add new group</button>\n            <DragDropContext onDragEnd={this.onDragEnd}>\n                <div class = \"droppable\">\n                <Droppable droppableId=\"droppable\" direction = \"horizontal\">\n                    {(provided, snapshot) => (\n                        <div \n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>tree</p>\n                                <div class = \"item\">\n                            {this.state.items.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div \n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"droppable2\">\n                <Droppable droppableId=\"droppable2\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            \n                            style={getListStyle(snapshot.isDraggingOver)}>\n                                <p>garden</p>\n                                <div className = \"item\">\n                            {this.state.selected.map((item, index) => (\n            \n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            \n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            </div>\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n                </div>\n                <div className = \"div2\">\n                {/* <Droppable droppableId=\"droppable3\">\n                    {(provided, snapshot) => (\n                        <div\n                            ref={provided.innerRef}\n                            style={getListStyle(snapshot.isDraggingOver)}>\n                            {this.state.extension.map((item, index) => (\n                                <Draggable\n                                    key={item.id}\n                                    draggableId={item.id}\n                                    index={index}>\n                                    {(provided, snapshot) => (\n                                        <div\n                                            ref={provided.innerRef}\n                                            {...provided.draggableProps}\n                                            {...provided.dragHandleProps}\n                                            style={getItemStyle(\n                                                snapshot.isDragging,\n                                                provided.draggableProps.style\n                                            )}>\n                                            {item.content}\n                                        </div>\n                                    )}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable> */}\n                </div>\n            </DragDropContext>\n            </div>\n        );\n    }\n}\n\n\nexport default test;\n","export default __webpack_public_path__ + \"static/media/ground1.47ddf3b8.png\";","import React, { Component } from 'react';\nimport '../style/Dialog.css';\n\nexport default class Dialog extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tdragging: false,\n\t\t\tstylesList: [],\n\t\t}\n\n\t\tthis._dragStart = this._dragStart.bind(this);\n\t\tthis._dragging = this._dragging.bind(this);\n\t\tthis._dragEnd = this._dragEnd.bind(this);\n\t}\n\n\t_dragStart(e, i) {\n\t\tconsole.log(\"_dragStart\")\n\t\tthis.setState({\n\t\t\tx: e.screenX - e.currentTarget.getBoundingClientRect().left,\n\t\t\ty: e.screenY - e.currentTarget.getBoundingClientRect().top,\n\t\t\tdragging: true\n\t\t});\n\t}\n\n\t_dragging(e, i) {\n\t\tconsole.log(\"_dragging\")\n\t\tif (this.state.dragging) {\n\t\t\tvar left = e.screenX - this.state.x;\n\t\t\tvar top = e.screenY - this.state.y;\n\t\t\tconsole.log(left, top);\n\n\t\t\tconst stylesList = this.state.stylesList;\n\t\t\tstylesList[i] = { left: left, top: top };\n\t\t\tthis.setState({\n\t\t\t\tstylesList: stylesList\n\t\t\t});\n\t\t}\n\t}\n\n\t_dragEnd(e, i) {\n\t\tconsole.log(\"_dragEnd\")\n\t\tconsole.log(e)\n\n\t\tthis.setState({\n\t\t\tdragging: false\n\t\t});\n\t}\n\n\trender() {\n\t\tconst theFlower = localStorage.getItem(\"flowers\");\n\t\tconst LS_KEY_ALL_PLANT = \"all_plant\";\n\t\tlet flowerArray;\n\t\tif (theFlower != null) {\n\t\t\tflowerArray = theFlower.split(\",\");\n\t\t\tconsole.log(flowerArray);\n\t\t} else {\n\t\t\tflowerArray = [];\n\t\t}\n\n\t\tlet all_plant_count;\n\t\tif (flowerArray.length == 0) {\n\t\t\tall_plant_count = 0;\n\t\t} else {\n\t\t\tall_plant_count = flowerArray.length;\n\t\t}\n\n\t\tlocalStorage.setItem(LS_KEY_ALL_PLANT, flowerArray.length);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{flowerArray.map((item, idx) =>\n\t\t\t\t\t<div className={\"Dialog\"} style={this.state.stylesList[idx]}\n\t\t\t\t\t\tonMouseDown={(e) => this._dragStart(e, idx)}\n\t\t\t\t\t\tonMouseMove={(e) => this._dragging(e, idx)}\n\t\t\t\t\t\tonMouseUp={(e) => this._dragEnd(e, idx)}>\n\t\t\t\t\t\t{item}\n\t\t\t\t\t\t{/* {this.props.itemFriends.map((item) => <p>{item}</p>)} */}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n\n","import React from \"react\";\nimport '../style/MyGarden.css'\nimport Grid from \"./Grid\"\nimport TreeList from \"./TreeList\"\nimport Test from \"./Test\"\nimport Tree from \"./Tree\"\nimport Ground from '../Image/ground1.png';\nimport grass from '../Image/grass1.png';\nimport { Button } from \"react-bootstrap\";\nimport Dialog from \"./Dialog\";\nimport MyTree from \"./MyTree\"\n\nclass MyGarden extends React.Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            showDialog: true,\n        }\n    }\n    _showDialog() {\n        this.setState({showDialog: this.state.showDialog});\n    }\n\t_showItem() {\n        this.setState({item: this.state.itemFriends});\n    }\n\n\trender() {\n\t\treturn (\n\t\t\t<div className='MyGarden'>\n                <div className=\"img-garden\"/>\n                <Dialog />         \n\t\t\t </div>\n\t\t);\n\t}\n} \n\nexport default MyGarden;\n    \n\n\n","const initialData = {\n\ttasks: {\n\t\t'task-1': { id: 'task-1', isDone: false, content: 'Happy Coding!' },\n\t\t'task-2': { id: 'task-2', isDone: false, content: '과제하기' },\n\t\t'task-3': { id: 'task-3', isDone: false, content: '몰입캠프 지원하기' },\n\t\t'task-4': { id: 'task-4', isDone: false, content: '텀블러 사기' },\n\t\t'task-5': { id: 'task-5', isDone: false, content: '설거지 하기' },\n\t\t// 'task-6': { id: 'task-6', isDone: false, content: 'good' }\n\t},\n\tcolumns: {\n\t\t'column-1': {\n\t\t\tid: 'column-1',\n\t\t\ttitle: 'To do',\n\t\t\ttaskIds: ['task-1', 'task-2', 'task-3', 'task-4', 'task-5']\n\t\t},\n\t\t'column-2': {\n\t\t\tid: 'column-2',\n\t\t\ttitle: 'In Progress',\n\t\t\ttaskIds: []\n\t\t},\n\t\t'column-3': {\n\t\t\tid: 'column-3',\n\t\t\ttitle: 'Done',\n\t\t\ttaskIds: []\n\t\t}\n\t},\n\tcolumnOrder: ['column-1', 'column-2', 'column-3']\n};\n\nexport default initialData;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Draggable } from 'react-beautiful-dnd';\n// import {confirmAlert} from'react-confirm-alert';\n\n// Styles\nconst Container = styled.div`\n   border: 1px solid lightgrey;\n   border-radius: 2px;\n   padding: 8px;\n   margin-bottom: 8px;\n  background-color: ${props => (\n\t\tprops.isDragDisabled ? 'lightgrey' : props.isDragging ? 'lightgreen' : 'white')};\n`;\n\nfunction onClickEditHandler(e) {\n\tconsole.log(`clicked ${e.target}`);\n\tconsole.dir(e.target);\n\tconst answer = prompt(\"수정 내용을 입력하세요.\")\n\tconsole.log(answer)\n}\nfunction onClickDeleteHandler(e) {\n\tconsole.log(`clicked ${e.target}`);\n\tconsole.dir(e.target);\n\t// confirmAlert({\n\t// \ttitle: 'Confirm to submit',\n\t// \tmessage: 'are you sure to do this',\n\t// \tbutton: [\n\t// \t\t{\n\t// \t\tlabel: 'yes',\n\t// \t\tonClick: () => alert('click yes')\n\t// \t},{\n\t// \t\tlabel: 'no',\n\t// \t\tonClick: () => alert(\"click no\")\n\t// \t}\n\t// ]});\n\n\talert(\"삭제하시겠습니까?\")\n}\n\nexport default class Task extends React.Component {\n\trender() {\n\t\tconst isDragDisabled = this.props.task.isDone === true;\n\t\treturn (\n\t\t\t<Draggable\n\t\t\t\tdraggableId={this.props.task.id}\n\t\t\t\tindex={this.props.index}\n\t\t\t\tisDragDisabled={isDragDisabled}\n\t\t\t>\n\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t<Container\n\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\tisDragging={snapshot.isDragging}\n\t\t\t\t\t\tisDragDisabled={isDragDisabled}\n\t\t\t\t\t>\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t{this.props.task.content}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{<button className=\"editBtn\" onClick={onClickEditHandler}>Edit</button>}\n\t\t\t\t\t\t{<button className=\"deleteBtn\" onClick={onClickDeleteHandler}>Delete</button>}\n\t\t\t\t\t</Container>\n\t\t\t\t)}\n\t\t\t</Draggable>\n\t\t)\n\t}\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task.jsx';\nimport { Button } from 'react-bootstrap';\n\n// Styles\nconst Container = styled.div`\n\tmargin: 8px;\n\tborder: 1px solid lightgrey;\n\tbackground-color: white;\n\tborder-radius: 5px;\n\twidth: 220px;\n\n\tdisplay: flex;\n\tflex-direction: column;\n`;\nconst Title = styled.h3`\n\tpadding: 8px;\n`;\nconst TaskList = styled.div`\n\tpadding: 8px;\n\ttransition: background-color 0.2s ease;\n\tbackground-color: ${props => (props.isDraggingOver ? 'skyblue' : 'inherit')};\n\tflex-grow: 1;\n\tmin-height: 100px;\n`;\n\nexport default class Column extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tshowComponent: false,\n\t\t\tindexTask: 0,\n\t\t\tkey: 0,\n\t\t};\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\thandleClick() {\n\t\t//add 버튼 클릭 시 수행 되어야 할 일\n\t\t// console.log(\"button click\")\n\t\tthis.setState({\n\n\t\t\tkey: this.state.key + 1,\n\t\t\tindexTask: this.state.indexTask,\n\t\t\tshowComponent: true\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Draggable draggableId={this.props.column.id} index={this.props.index}>\n\t\t\t\t\t{provided => (\n\t\t\t\t\t\t<Container\n\t\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Title {...provided.dragHandleProps}>\n\t\t\t\t\t\t\t\t{this.props.column.title}\n\t\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t\t<Button className=\"addBtn\" type=\"button\" onClick={this.handleClick}>add</Button>\n\n\t\t\t\t\t\t\t<Droppable droppableId={this.props.column.id} type=\"task\">\n\t\t\t\t\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t\t\t\t\t<TaskList\n\t\t\t\t\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\t\t\t\t\t{...provided.droppableProps}\n\n\t\t\t\t\t\t\t\t\t\tisDraggingOver={snapshot.isDraggingOver}>\n\t\t\t\t\t\t\t\t\t\t{/* task 수정 필요 */}\n\t\t\t\t\t\t\t\t\t\t{this.state.showComponent ? <Task key={this.state.key} task={\"\"} index={this.state.indexTask} /> : null}\n\t\t\t\t\t\t\t\t\t\t{/* {console.log(`showComponent is ${this.state.showComponent}`)}\n\t\t\t\t\t\t\t\t\t{console.log(`key is ${this.state.key}`)}\n\t\t\t\t\t\t\t\t\t{console.log(`indexTask is ${this.state.indexTask}`)} */}\n\n\t\t\t\t\t\t\t\t\t\t{this.props.tasks.map((task, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<Task key={task.id} task={task} index={index} />\n\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t{provided.placeholder}\n\t\t\t\t\t\t\t\t\t</TaskList>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</Droppable>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t)}\n\t\t\t\t</Draggable>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import { ImageExposureZero } from 'material-ui/svg-icons';\nimport React, { Component } from 'react';\nimport '../style/SetTimer.css';\nimport Home from \"./Home\";\n\nlet killCount = 0;\nclass SetTimer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      hours: 0,\n      minutes: 0,\n      seconds:0\n    }\n    this.hoursInput = React.createRef();\n    this.minutesInput= React.createRef();\n    this.secondsInput = React.createRef();\n  }\n\n  inputHandler = (e) => {\n    this.setState({[e.target.name]: e.target.value});\n  }\n\n  convertToSeconds = ( hours, minutes, seconds) => {\n    return seconds + minutes * 60 + hours * 60 * 60;\n  }\n\n  startTimer = () => {\n    this.timer = setInterval(this.countDown, 1000);\n    // 인풋에 적은 숫자 지우기\n    const hoursInput = document.querySelector(\"input[name=hours]\");\n    const minutesInput = document.querySelector(\"input[name=minutes]\");\n    const secondsInput = document.querySelector(\"input[name=seconds]\");\n    const budContainer = document.querySelector(\".budImageContainer\");\n    hoursInput.value=\"\";\n    minutesInput.value=\"\";\n    secondsInput.value=\"\";\n    budContainer.classList.add(\"showing\");\n  }\n\n  countDown = () => {\n    const  { hours, minutes, seconds } = this.state;\n    const LS_KEY_KILL_PLANT = \"kill_plant\";\n    killCount = JSON.parse(localStorage.getItem(LS_KEY_KILL_PLANT));\n    let c_seconds = this.convertToSeconds(hours, minutes, seconds);\n    if (!this.props.toDoIsNotEmpty && !this.props.InProgressIsNotEmpty){ // 우선 할일을 다 하게 되면\n      this.stopTimer();\n    } else { // 할일 다 안 한 경우면\n      if ( hours === 0 &&  minutes === 0 & seconds === 0) { // time over라면\n        killCount = JSON.parse(localStorage.getItem(LS_KEY_KILL_PLANT)) + 1;\n        console.log(\"kill count is \" + killCount);\n\n        document.querySelector(\".budImageContainer\").classList.remove(\"showing\");\n        alert(`시간 내에 할일을 다 못하셨군요... 꽃이 시들었어요. ㅠㅠ`)\n      }\n      localStorage.setItem(LS_KEY_KILL_PLANT, JSON.stringify(killCount));\n    }\n    \n    if(c_seconds) {\n\n      // seconds change\n      seconds ? this.setState({seconds: seconds-1}) : this.setState({seconds: 59});\n\n      // minutes change\n      if(c_seconds % 60 === 0 && minutes) {\n        this.setState({minutes: minutes -1});\n      }\n\n      // when only hours entered\n      if(!minutes && hours) {\n        this.setState({minutes: 59});\n      }\n\n      // hours change\n      if(c_seconds % 3600 === 0 && hours) {\n        this.setState({hours: hours-1});\n      }\n\n    } else {\n      clearInterval(this.timer);\n    } \n  }\n\n  stopTimer = () => {\n    clearInterval(this.timer);\n    const hoursInput = document.querySelector(\"input[name=hours]\");\n    const minutesInput = document.querySelector(\"input[name=minutes]\");\n    const secondsInput = document.querySelector(\"input[name=seconds]\");\n    hoursInput.value=\"\";\n    minutesInput.value=\"\";\n    secondsInput.value=\"\";\n  }\n\n  resetTimer = () => {\n    this.setState({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    this.hoursInput.current.value = \"\";\n    this.minutesInput.current.value = \"\";\n    this.secondsInput.current.value = \"\";\n  }\n\n  render() {\n    const { hours, minutes, seconds } = this.state;\n\n    return (\n      <div className=\"SetTimer\">\n        <h3>TIMER</h3>\n\n        <div>\n          <input ref={this.hoursInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"시를 입력하세요\"} name=\"hours\" onChange={this.inputHandler} />\n          <input ref={this.minutesInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"분을 입력하세요\"} name=\"minutes\" onChange={this.inputHandler} />\n          <input ref={this.secondsInput} type=\"number\" className=\"form-control input-lg\" placeholder={\"초를 입력하세요\"} name=\"seconds\" onChange={this.inputHandler} />\n        </div>\n        \n         <div>\n            <button onClick={this.startTimer} className=\"startBtn\">START</button>\n            <button onClick={this.stopTimer}  className=\"stopBtn\">STOP</button>\n            <button onClick={this.resetTimer}  className=\"resetBtn\">RESET</button>\n         </div>\n\n         <h4 className=\"timer-settimer\">남은 시간</h4>\n         <h2>{hours<10? `0${hours}` : hours} : {minutes<10? `0${minutes}` : minutes} : {seconds<10? `0${seconds}` : seconds}</h2>\n      </div>\n    );\n  }\n}\n\nexport default SetTimer;","import React, { Component } from 'react';\nimport '../style/Dialog.css';\n\nexport default class Dialog extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            diffX: 0,\n            diffY: 0,\n            dragging: false,\n            styles: {}\n        }\n\n        this._dragStart = this._dragStart.bind(this);\n        this._dragging = this._dragging.bind(this);\n        this._dragEnd = this._dragEnd.bind(this);\n    }\n\n    _dragStart(e) {\n        this.setState({\n            diffX: e.screenX - e.currentTarget.getBoundingClientRect().left,\n            diffY: e.screenY - e.currentTarget.getBoundingClientRect().top,\n            dragging: true\n        });\n    }\n\n    _dragging(e) {\n        if(this.state.dragging) {\n            var left = e.screenX - this.state.diffX;\n            var top = e.screenY - this.state.diffY;\n    \n            this.setState({\n                styles: {\n                    left: left,\n                    top: top\n                }\n            });\n        }\n    }    \n\n    _dragEnd() {\n        this.setState({\n            dragging: false\n        });\n    }\n\n    render() {\n        var classes = this.props.show ? 'Dialog' : 'Dialog hidden';\n        return (\n            <div className={classes} style={this.state.styles} \n            onMouseDown={this._dragStart} \n            onMouseMove={this._dragging} \n            onMouseUp={this._dragEnd}\n            onMouseLeave={this._dragEnd}>\n                <div className='DialogTitle'>My Dialog</div> \n                <div className='Contents'>\n                    Contents of the Dialog: \n                        - one\n                        - two\n                        - three \n                </div>\n                <div className='closeButton' onClick={this.props.onClose}>\n                    Close\n                </div>\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/watering.22c2f31d.png\";","export default __webpack_public_path__ + \"static/media/wind.7d436f15.png\";","export default __webpack_public_path__ + \"static/media/trimming.a0da9e27.png\";","import React, { useState } from \"react\";\nimport styled from 'styled-components';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport initialData from \"../initial-data\";\nimport Column from '../Column.jsx';\nimport '../style/Home.css';\nimport '../style/SetTimer.css';\nimport Dialog from \"./DoneDialog\";\nimport SetTimer from \"./SetTimer\";\nimport Fade from '@material-ui/core/Fade'\nimport { CommunicationSpeakerPhone } from \"material-ui/svg-icons\";\nimport wateringImg from './watering.png';\nimport windImg from './wind.png';\nimport trimmingImg from './trimming.png';\n\n// Styles\nconst Container = styled.div`\n  display: flex;\n`;\n\n// let flowers = [];\nclass Home extends React.Component {\n  state = initialData; //initialData는 지금은 따로 파일에서 하드코딩한 상태. 이제 DB에서 어케 부를지 방법을 찾아보자.\n\n  // 드래그가 시작되면\n  onDragStart = (startColumn, provided) => {\n    document.body.style.transition = 'background-color 0.2s ease';\n  }\n  // 드래그를 해서 상황이 업데이트되면\n  onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination ?\n      destination.index / Object.keys(this.state.tasks).length\n      : 0;\n    document.body.style.backgroundColor = `rgba(153,  141, 217, ${opacity})`;\n  }\n  //딱 드롭했을 때가 되면\n  onDragEnd = result => {\n    document.body.style.color = 'inherit';\n    document.body.style.backgroundColor = 'inherit';\n    const { destination, source, draggableId, type } = result;\n\n    // Task가 옮겨졌을 때 처리하기\n    if (!destination) { // 1. 아예 이상한 바깥 곳에 놓았을 경우\n      return;\n    }\n    if ( // 2. 이전 위치와 같은 곳에 놓았을 경우\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    // 3. Task가 Done 칼럼으로 옮겨졌을 경우\n    const rewardList = [\".sunShineContainer\", \".wateringContainer\", \".windContainer\", \".trimContainer\"]\n    const REWARD_COUNT = 4;\n    if (destination.droppableId === 'column-3') {\n      // (1) 해당 Task를 disableDraggable 한다\n      this.state.tasks[draggableId].isDone = true;\n\n      // (2) 햇빛을 쪼인다\n      const randomIndex = Math.floor(Math.random() * REWARD_COUNT);\n      const container = rewardList[randomIndex];\n      const randomReward = document.querySelector(container);\n      randomReward.classList.add(\"showing\");\n      setTimeout(() => {\n        randomReward.classList.remove(\"showing\");\n      }, 1000)\n    }\n\n    // 여기서 잠깐... Column 자체가 옮겨졌을 때 처리하기\n    if (type === 'column') {\n      const newColumnOrder = Array.from(this.state.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.state,\n        columnOrder: newColumnOrder\n      };\n      this.setState(newState);\n      return;\n    }\n\n    const startColumn = this.state.columns[source.droppableId];\n    const finishColumn = this.state.columns[destination.droppableId];\n    \n    // 4. persist reordering of task that has been moved within a list\n    // 4. Task가 Column 내에서 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\n    if (startColumn === finishColumn) {\n      const newTaskIds = Array.from(startColumn.taskIds);\n      newTaskIds.splice(source.index, 1); // 우선 옮겨짐 당한 Task를 원래 자리에서 없애고\n      newTaskIds.splice(destination.index, 0, draggableId); // 옮긴 후의 그 자리에 끼워넣는다\n\n      const newColumn = { // Column 내 Task들 갱신\n        ...startColumn,\n        taskIds: newTaskIds\n      };\n      const newState = { // Column 갱신\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    // 5. persist reordering of task that has been moved from one list to another\n    // 5. Task가 Column 너머 옮겨졌을 때 그 옮겨진 자리가 유지되도록 처리하기\n    const startTaskIds = Array.from(startColumn.taskIds);\n    startTaskIds.splice(source.index, 1);\n    const newStart = {\n      ...startColumn,\n      taskIds: startTaskIds\n    };\n    const finishTaskIds = Array.from(finishColumn.taskIds);\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    const newFinish = {\n      ...finishColumn,\n      taskIds: finishTaskIds\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    }\n    this.setState(newState)\n    \n    console.log(\"Todo is \"+newState.columns[\"column-1\"].taskIds);\n    console.log(\"In Progress is \"+newState.columns[\"column-2\"].taskIds);\n    \n    // 6. Task가 Column 너머 옮겨졌을 때, 이제 더이상 To-do, In Progress Column에 아무 것도 없을 경우(즉 전부 Done칼럼으로 옮겨졌을 경우)\n    const toDoIsNotEmpty = newState.columns[\"column-1\"].taskIds.length;\n    const InProgressIsNotEmpty = newState.columns[\"column-2\"].taskIds.length;\n    const FLOWERS = [\"🌹\",\"🌺\",\"🌻\",\"🌼\",\"🌷\",\"🍀\",\"🌵\"];\n    const FLOWER_COUNT = 7;\n    const LS_KEY_FLOWERS = \"flowers\";\n\n    if (!toDoIsNotEmpty && !InProgressIsNotEmpty) {\n      const randomIndex = Math.floor(Math.random() * FLOWER_COUNT);\n      const theFlower = FLOWERS[randomIndex];\n      alert(`축하합니다!\\n꽃이 자랐어요.\\n${theFlower}`);\n\n      let currentFlowersString = getFlower();\n      if (!currentFlowersString){ // local에 아무것도 없음\n        currentFlowersString = theFlower;\n      }\n      else\n      currentFlowersString += (\",\"+theFlower);\n\n      saveFlower(currentFlowersString);\n    }\n    function getFlower(){\n      return localStorage.getItem(LS_KEY_FLOWERS);\n    }\n    function saveFlower(flowers){\n      \n      localStorage.setItem(LS_KEY_FLOWERS, flowers);\n    }\n\n    // TODO: 그리고 이렇게 reorder된 index값들을 디비에 저장해야 refresh했을 때도 유지될 수 있는데, 어떻게 하지?\n  };\n\n  render() {\n    return (\n      <>\n      <SetTimer\n        toDoIsNotEmpty={this.state.columns[\"column-1\"].taskIds.length}\n        InProgressIsNotEmpty={this.state.columns[\"column-2\"].taskIds.length}\n      />\n      \n      <div className=\"sunShineContainer\">\n        <img src=\"https://lh3.googleusercontent.com/proxy/V7_ZR1X-TbB58fpWZCjUgnifEM2Ch4llYZiTUywXD83mVn1YiLHS7B0I0VrdVqEOZPsnXzJ4i3_m_bQWs4_ew6iFla0UJ0NO48WQE90coJkPIy0mwEct06AGgml55w\" />\n      </div>\n      <div className=\"wateringContainer\">\n        <img src={wateringImg} />\n      </div>\n      <div className=\"windContainer\">\n        <img src={windImg} />\n      </div>\n      <div className=\"trimContainer\">\n        <img src={trimmingImg} />\n      </div>\n      <div className=\"budImageContainer\">\n        <img src=\"https://media1.giphy.com/media/1yTgqsdYPFw4Oqly5T/giphy.gif\" />\n      </div>\n      {/* <div className=\"home\"> */}\n        <div className=\"toDoContainer\">\n          <DragDropContext\n          onDragEnd={this.onDragEnd}\n          onDragStart={this.onDragStart}\n          onDragUpdate={this.onDragUpdate}\n          >\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              {provided => (\n                <Container\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                >\n                  {this.state.columnOrder.map((columnId, index) => {\n                    const column = this.state.columns[columnId];\n                    const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n                    return <Column key={column.id} column={column} tasks={tasks} index={index} />;\n                  })}\n                  {provided.placeholder}\n                  \n                </Container>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </div>\n        \n      {/* </div> */}\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nconst PasswordStr = props => {\n  var strColor;\n  var strWidth;\n\n  switch (props.score) {\n    case 1:\n      strColor = 'red';\n      strWidth = '20%';\n      break;\n    case 2:\n      strColor = 'orange';\n      strWidth = '40%';\n      break;\n    case 3:\n      strColor = 'yellow';\n      strWidth = '60%';\n      break;\n    case 4:\n      strColor = '#5cff47';\n      strWidth = '80%';\n      break;\n    case 5:\n      strColor = 'green';\n      strWidth = '100%';\n      break;\n    default:\n  }\n\n  var style = { backgroundColor: strColor, height: '5px', width: strWidth, transition: 'all 300ms ease-in-out' }\n\n  return (\n  <div>\n    <p className=\"pwStrWeak\">weak</p>\n    <p className=\"pwStrStrong\">strong</p>\n    <div style={style} />\n  </div> \n  );\n\n}\n\nexport default PasswordStr;","import React from \"react\";\nimport FlatButton from \"material-ui/FlatButton\";\nimport RaisedButton from \"material-ui/RaisedButton\";\nimport TextField from \"material-ui/TextField\";\nimport PasswordStr from \"./PasswordStr\";\nimport \"../style/SignUp.css\";\n\nconst SignUpForm = ({\n  history,\n  onSubmit,\n  onChange,\n  errors,\n  user,\n  score,\n  btnTxt,\n  type,\n  pwMask,\n  onPwChange\n}) => {\n  return (\n    <div className=\"loginBox\">\n      <h1>Sign Up</h1>\n      {errors.message && <p style={{ color: \"red\" }}>{errors.message}</p>}\n\n      <form onSubmit={onSubmit}>\n        <TextField\n          name=\"username\"\n          floatingLabelText=\"user name\"\n          value={user.username}\n          onChange={onChange}\n          errorText={errors.username}\n        />\n        <TextField\n          name=\"email\"\n          floatingLabelText=\"email\"\n          value={user.email}\n          onChange={onChange}\n          errorText={errors.email}\n        />\n        <TextField\n          type={type}\n          name=\"password\"\n          floatingLabelText=\"password\"\n          value={user.password}\n          onChange={onPwChange}\n          errorText={errors.password}\n        />\n\n        <div className=\"pwStrRow\">\n          {score >= 1 && (\n            <div>\n              <PasswordStr score={score} /> \n              <FlatButton \n                className=\"pwShowHideBtn\" \n                label={btnTxt} onClick={pwMask} \n                style={{position: 'relative', left: '50%', transform: 'translateX(-50%)'}} \n              />\n            </div>\n            )} \n        </div>\n        <TextField\n          type={type}\n          name=\"pwconfirm\"\n          floatingLabelText=\"confirm password\"\n          value={user.pwconfirm}\n          onChange={onChange}\n          errorText={errors.pwconfirm}\n        />\n        <br />\n        <RaisedButton\n          className=\"signUpSubmit\"\n          primary={true}\n          type=\"submit\"\n          label=\"submit\"\n        />\n      </form>\n      <p>\n        Aleady have an account? <br />\n        <a href=\"/\">Log in here</a>\n      </p>\n    </div>\n  );\n};\n\nexport default SignUpForm;\n","import React, { Component } from \"react\";\nimport SignUpForm from \"./SignUpForm.js\";\nconst axios = require(\"axios\");\nconst FormValidators = require(\"./validate\");\nconst validateSignUpForm = FormValidators.validateSignUpForm;\nconst zxcvbn = require(\"zxcvbn\");\n\n\nclass SignUpContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      errors: {},\n      user: {\n        username: \"\",\n        email: \"\",\n        password: \"\",\n        pwconfirm: \"\"\n      },\n      btnTxt: \"show\",\n      type: \"password\",\n      score: \"0\"\n    };\n\n    this.pwMask = this.pwMask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.submitSignup = this.submitSignup.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n    this.pwHandleChange = this.pwHandleChange.bind(this);\n  }\n\n  handleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n  }\n\n  pwHandleChange(event) {\n    const field = event.target.name;\n    const user = this.state.user;\n    user[field] = event.target.value;\n\n    this.setState({\n      user\n    });\n\n    if (event.target.value === \"\") {\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: \"null\"\n        })\n      );\n    } else {\n      var pw = zxcvbn(event.target.value);\n      this.setState((state) =>\n        Object.assign({}, state, {\n          score: pw.score + 1\n        })\n      );\n    }\n  }\n\n  submitSignup(user) {\n    var params = { username: user.usr, password: user.pw, email: user.email };\n    axios\n      .post(\"https://ouramazingserver.com/api/signup/submit\", params)\n      .then((res) => {\n        if (res.data.success === true) {\n          localStorage.token = res.data.token;\n          localStorage.isAuthenticated = true;\n          window.location.reload();\n        } else {\n          this.setState({\n            errors: { message: res.data.message }\n          });\n        }\n      })\n      .catch((err) => {\n        console.log(\"Sign up data submit error: \", err);\n      });\n  }\n\n  validateForm(event) {\n    event.preventDefault();\n    var payload = validateSignUpForm(this.state.user);\n    if (payload.success) {\n      this.setState({\n        errors: {}\n      });\n      var user = {\n        usr: this.state.user.username,\n        pw: this.state.user.password,\n        email: this.state.user.email\n      };\n      this.submitSignup(user);\n    }\n     else {\n      const errors = payload.errors;\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  pwMask(event) {\n    event.preventDefault();\n    this.setState((state) =>\n      Object.assign({}, state, {\n        type: this.state.type === \"password\" ? \"input\" : \"password\",\n        btnTxt: this.state.btnTxt === \"show\" ? \"hide\" : \"show\"\n      })\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <SignUpForm onSubmit={this.validateForm} onChange={this.handleChange} onPwChange={this.pwHandleChange} errors={this.state.errors} user={this.state.user} score={this.state.score} btnTxt={this.state.btnTxt} type={this.state.type} pwMask={this.pwMask}/>\n      </div>\n    );\n  }\n}\n\nexport default SignUpContainer;\n\n// module.exports = SignUpContainer;\n\n\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport Popup from 'reactjs-popup'\nimport Modal from 'react-modal'\nimport { Button } from 'reactstrap';\nimport SignUpContainer from \"./SignUpContainer\";\nimport MuiThemeProvider from \"material-ui/styles/MuiThemeProvider\";\n\nclass SignUp extends React.Component {\n\n    constructor(props){\n        super(props)\n        // this.state = {name: \"hello\"};\n    }\n\n    render(){\n    return (\n        <MuiThemeProvider>\n            {/* {this.props.children} */}\n            <SignUpContainer/>\n        </MuiThemeProvider>\n    );\n    }\n}\n\nexport default SignUp;","import React from \"react\";\nimport { InputGroup, Form, Button } from \"react-bootstrap\"\nimport PasswordMask from 'react-password-mask';\nimport \"../style/Login.css\"\n\nclass Login extends React.Component {\n\n\tstate = {\n\t\tname: \"\",\n\t\tpass: \"\",\n\t\temail: \"\"\n\t};\n\n\thandleChange(e) {\n\t\tthis.setState({\n\t\t\t[e.target.name]: e.target.value\n\t\t});\n\t}\n\n\t// this.onSubmit = this.onSubmit.bind(this);\n\n\n\tonSubmit = () => {\n\t\tconst LS_KEY_NAME = \"name\";\n\t\tconst LS_KEY_PASS = \"pass\";\n\t\tconst LS_KEY_EMAIL = \"email\";\n\n\t\tlocalStorage.setItem(LS_KEY_NAME, this.state.name)\n\t\tlocalStorage.setItem(LS_KEY_PASS, this.state.pass)\n\t\tlocalStorage.setItem(LS_KEY_EMAIL, this.state.email)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"login-all\">\n\t\t\t\t<Form.Group className=\"login\">\n\t\t\t\t\t<h1> login</h1>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<InputGroup.Text id=\"inputGroup-sizing-lg\" placeholder=\"enter the name\" >NAME  </InputGroup.Text>\n\t\t\t\t\t<br></br>\n\n\t\t\t\t\t<Form.Control className=\"textFeedback\" placeholder=\"enter the name\" value={this.state.name} onChange={e => this.setState({ name: e.target.value })} type=\"text\" />\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<InputGroup.Text id=\"inputGroup-sizing-lg\" placeholder=\"enter the name\" >PASS  </InputGroup.Text>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<PasswordMask className=\"password-sm\" id=\"password\" name=\"password\" placeholder=\"Enter password\" value={this.state.pass} onChange={e => this.setState({ pass: e.target.value })} inputStyles={{ padding: '12px', fontSize: '15px' }} buttonStyles={{ width: '60px' }} />\n\t\t\t\t\t<br></br>\n\t\t\t\t\t{/* <Form.Control className=\"textFeedback\"  placeholder=\"enter the pass\" value={this.state.pass} onChange={e => this.setState({ pass: e.target.value })} type=\"text\"/> */}\n\t\t\t\t\t<InputGroup.Text id=\"inputGroup-sizing-lg\" placeholder=\"enter the name\" >email  </InputGroup.Text>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<Form.Control className=\"textFeedback\" placeholder=\"enter the email\" value={this.state.email} onChange={e => this.setState({ email: e.target.value })} type=\"text\" />\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<Button variant=\"secondary\" href='/' onClick={this.onSubmit}>submit</Button>\n\t\t\t\t</Form.Group>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Login;\n","import React, {useState} from \"react\";\nimport '../style/MyProfile.css';\nconst ImgUpload =({onChange,src})=>\n<label htmlFor=\"photo-upload\" className=\"custom-file-upload fas\">\n      <div className=\"img-wrap img-upload\" >\n        <img htmlFor=\"photo-upload\" src={src}/>\n      </div>\n      <input id=\"photo-upload\" type=\"file\" onChange={onChange}/> \n    </label>\n\n  const nameText = localStorage.getItem(\"name\");\n  const passText = localStorage.getItem(\"pass\");\n  const emailText = localStorage.getItem(\"email\");\n  const all_plantText = localStorage.getItem(\"all_plant\");\n  const kill_plantText = localStorage.getItem(\"kill_plant\");\n\n  const Name =({onChange,value})=>\n   \n    <div className=\"field\">\n      <label htmlFor=\"name\">이름</label>\n      {/* {toggle ? (<p onDoubleClick={toggleInput}> {text}</p>) : (<input type=\"text\" value= {text} onChange={handleChange}/>)} */}\n      <h3>{nameText}</h3>\n      {/* <input id=\"name\" type=\"text\" onChange={onChange} maxLength=\"25\" value = \"hi\"/> */}\n    </div>\n  \n  const Status =({onChange, valueColumncar})=>\n    <div className=\"field\">\n      <label htmlFor=\"status\">내가 키운 꽃들</label>\n      <h3>{localStorage.getItem(\"flowers\")}</h3>\n      {/* <input id=\"status\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/> */}\n    </div>\n\nconst Email =({onChange,valueColumncar})=>\n<div className=\"field\">\n  <label htmlFor=\"email\">이메일</label>\n  <h3>{emailText}</h3>\n  {/* <input id=\"email\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/> */}\n</div>\n\n  const KillCount =({onChange,valueColumncar})=>\n    <div className=\"field\">\n      <label htmlFor=\"killcount\">시든 꽃 수</label>\n      <h3>{localStorage.getItem(\"kill_plant\")==\"null\"? 0 : localStorage.getItem(\"kill_plant\")}</h3>\n      {/* <input id=\"killcount\" type=\"text\" onChange={onChange}  maxLength=\"35\"  required/> */}\n    </div>\n\n    const AllPlant =({onChange,valueColumncar})=>\n      <div className=\"field\">\n        <label htmlFor=\"AllPlant\">심은 꽃 수</label>\n        <h3>{localStorage.getItem(\"all_plant\")==\"null\"? 0 : localStorage.getItem(\"all_plant\")}</h3>\n        {console.log(all_plantText)}\n        </div>\n        {/* <input  id=\"AllPlant\"  type=\"text\"   onChange={onChange} maxLength=\"35\"   required/> */}\n      \n  \n  \n  const Profile =({\n    onSubmit,\n    src,\n    name,\n    status,\n    email,\n    KillCount,\n    AllPlant\n  })=>\n    <div className=\"card\">\n      <form onSubmit={onSubmit}>\n        <div className=\"name\">{name}</div>\n        <div className=\"status\">{status}</div>\n        <div className=\"email\">{email}</div>\n        <div className=\"KillCount\">{KillCount}</div>\n        <div className=\"AllPlant\">{AllPlant}</div>\n        {/* <button type=\"save\" className=\"edit\">Edit Profile </button> */}\n      </form>\n    </div>\n       \n        \n  const Edit =({ onSubmit, children})=>\n    <div className=\"card\">\n      <form onSubmit={onSubmit}>\n          {children}\n        {/* <button type=\"edit\" className=\"save\">edit </button> */}\n      </form>\n    </div>\n  \n  class MyProfile extends React.Component {\n    state = {\n      file: '',\n      imagePreviewUrl: 'https://github.com/OlgaKoplik/CodePen/blob/master/profile.jpg?raw=true',\n      name:'',\n      status:'',\n      email:'',\n      KillCount:'',\n      AllPlant:'',\n      active: 'edit'\n    }\n  \n    photoUpload = e =>{\n      e.preventDefault();\n      const reader = new FileReader();\n      const file = e.target.files[0];\n      reader.onloadend = () => {\n        this.setState({\n          file: file,\n          imagePreviewUrl: reader.result\n        });\n      }\n      reader.readAsDataURL(file);\n    }\n    editName = e =>{\n      const name = e.target.value;\n      this.setState({\n        name,\n      });\n    }\n    editEmail = e =>{\n      const email = e.target.value;\n      this.setState({\n        email,\n      });\n    }\n    \n    editStatus = e => {\n      const status = e.target.value;\n      this.setState({\n        status,\n      });\n    }\n    editKillCount = e => {\n      const KillCount = e.target.value;\n      this.setState({\n        KillCount,\n      });\n    }\n    editAllPlant = e => {\n      const AllPlant = e.target.value;\n      this.setState({\n        AllPlant,\n      });\n    }\n    \n    handleSubmit= e =>{\n      e.preventDefault();\n      let activeP = this.state.active === 'edit' ? 'profile' : 'edit';\n      this.setState({\n        active: activeP,\n      })\n    }\n    \n    render() {\n      const {imagePreviewUrl, \n             name, \n             status, email, killCount, allPlant,\n             active} = this.state;\n      return (\n        <div>\n          {(active === 'edit')?(\n            <Edit onSubmit={this.handleSubmit}>\n              <ImgUpload onChange={this.photoUpload} src={imagePreviewUrl}/>\n              <Name onChange={this.editName} value={name}/>\n              <Status onChange={this.editStatus} value={status}/>\n              <Email onChange={this.editEmail} value={email}/>\n              <KillCount onChange={this.editKillCount} value={killCount}/>\n              <AllPlant onChange={this.editAllPlant} value={allPlant}/>\n            </Edit>\n          ):(\n            <Profile \n              onSubmit={this.handleSubmit} \n              src={imagePreviewUrl} \n              name={name} \n              status={status}\n              email={email}\n              KillCount={KillCount}\n              AppPlant={AllPlant}/>)}\n          \n        </div>\n      )\n    }\n  }\n  \n export default MyProfile;","import React from 'react';\nimport './style/App.css';\nimport Navbar from './Navbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Profile from './route/Profile';\nimport MyGarden from './route/MyGarden';\nimport Home from './route/Home'\nimport SignUp from './Sign/SignUp'\nimport Timer from './route/TreeColumn'\nimport Grid from './route/Grid'\nimport Login from './route/Login'\nimport MyProfile from './route/MyProfile'\n\n\nclass App extends React.Component {\n  render(){\n  return (\n    <Router>\n      <Navbar />\n      <Switch>\n        <Route path='/signup' exact component={SignUp} />\n        <Route path='/login' exact component={Login} />\n        <Route path='/' exact component={Home} />\n        <Route path='/profile' component={MyProfile} />\n        <Route path='/mygarden' component={MyGarden} />\n      </Switch>\n    </Router>\n  );\n}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from \"react-dom\";\nimport App from './App';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App/>, rootElement);\n\n"],"sourceRoot":""}